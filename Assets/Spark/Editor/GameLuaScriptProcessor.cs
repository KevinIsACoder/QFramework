using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using UnityEditor;
using UnityEngine;
using Spark;

public class GameLuaScriptProcessor : AssetPostprocessor
{
#if !SPARK_AUTO_BUILD
	private static void OnPostprocessAllAssets(string[] importedAssets, string[] deletedAssets, string[] movedAssets, string[] movedFromPath)
	{
		// 1-文件, 2-目录, 3-正则
		var excludes = new HashSet<KeyValuePair<int, string>>(new KeyValuePair<int, string>[] {
			//new KeyValuePair<int, string>(1, "Assets/SparkAssets/Lua/Game/Main.lua"),
			new KeyValuePair<int, string>(1, "Assets/SparkAssets/Lua/Core/Def/Declare.lua"),
			new KeyValuePair<int, string>(1, "Assets/SparkAssets/Lua/Core/Def/Include.lua"),
			//new KeyValuePair<int, string>(1, "Assets/SparkAssets/Lua/Game/Net/HotUpdate.lua"),
			//new KeyValuePair<int, string>(1, "Assets/SparkAssets/Lua/Game/UIViewBase.lua"),

			// folders
			//new KeyValuePair<int, string>(2, "Assets/SparkAssets/Lua/Launch"),
			new KeyValuePair<int, string>(2, "Assets/SparkAssets/Lua/Spark"),
			new KeyValuePair<int, string>(2, "Assets/SparkAssets/Lua/Common"),
			new KeyValuePair<int, string>(2, "Assets/SparkAssets/Lua/Debug"),

			// regexp
			//new KeyValuePair<int, string>(3, @"Assets/SparkAssets/Lua/Game/Books/.+/.+\.lua"),
			//new KeyValuePair<int, string>(3, @"Assets/SparkAssets/Lua/Books/.+/.+\.lua"),
		});

		var processed = false;

		// games
		foreach(var d in Directory.GetDirectories("Assets/SparkAssets/Lua/Game")) {
			var path = d.Replace('\\', '/');
			if (Path.GetFileNameWithoutExtension(path) != "Common") {
				var include = path + "/Include.lua";
				excludes.Add(new KeyValuePair<int, string>(1, include));
				processed = ProcessInclude(path, include, excludes, importedAssets, deletedAssets, movedAssets, movedFromPath, true) | processed;
				excludes.Add(new KeyValuePair<int, string>(2, path));
			}
		}

		// common
		{
			var path = "Assets/SparkAssets/Lua/";
			var include = "Assets/SparkAssets/Lua/Core/Def/Include.lua";
			processed = ProcessInclude(path, include, excludes, importedAssets, deletedAssets, movedAssets, movedFromPath, false) | processed;
		}

		if (processed) {
			Debug.Log("<color=#885500ff>[LuaScript-AutoGenerated] Detect some assets changed, recreating ...</color>");

			AssetDatabase.SaveAssets();
			AssetDatabase.Refresh();
		}
		// if (CheckAssetsChanged(path, excludes, importedAssets, deletedAssets, movedAssets, movedFromPath)) {
		// 	HashSet<string> names = new HashSet<string>();

		// 	var count = path.Length;
		// 	StringBuilder builder = new StringBuilder();
		// 	var files = Directory.GetFiles(path, "*.lua", SearchOption.AllDirectories);
		// 	Array.Sort(files);
		// 	foreach (var file in files) {
		// 		var p = file.Replace("\\", "/");
		// 		if (Excluded(p, excludes))
		// 			continue;
		// 		p = p.Substring(count, p.Length - count - 4).Replace("/", ".");
		// 		var name = p.Substring(p.LastIndexOf(".") + 1);
		// 		if (names.Contains(name)) {
		// 			Debug.LogWarning("[LuaScript-AutoGenerated] Detect same name: " + name);
		// 		} else {
		// 			names.Add(name);
		// 			builder.AppendFormat("using(\"{0}\", \"{1}\")", name, p).AppendLine();
		// 		}
		// 	}
		// 	FileHelper.WriteString("Assets/SparkAssets/Lua/Core/Def/Include.lua", builder.ToString());

		// 	Debug.Log("<color=#885500ff>[LuaScript-AutoGenerated] Detect some assets changed, recreating ...</color>");

		// 	AssetDatabase.SaveAssets();
		// 	AssetDatabase.Refresh();
		// }
	}
#endif

	private static bool ProcessInclude(string path, string include, HashSet<KeyValuePair<int, string>> excludes, string[] importedAssets, string[] deletedAssets, string[] movedAssets, string[] movedFromPath, bool containsUnusing){
		if (CheckAssetsChanged(path, excludes, importedAssets, deletedAssets, movedAssets, movedFromPath)) {
			HashSet<string> names = new HashSet<string>();

			var count = "Assets/SparkAssets/Lua/".Length;
			StringBuilder builder = new StringBuilder();
			var files = Directory.GetFiles(path, "*.lua", SearchOption.AllDirectories);
			Array.Sort(files);
			foreach (var file in files) {
				var p = file.Replace("\\", "/");
				if (Excluded(p, excludes))
					continue;
				p = p.Substring(count, p.Length - count - 4).Replace("/", ".");
				var name = p.Substring(p.LastIndexOf(".") + 1);
				if (names.Contains(name)) {
					Debug.LogWarning("[LuaScript-AutoGenerated] Detect same name: " + name);
				} else {
					names.Add(name);
					builder.AppendFormat("using(\"{0}\", \"{1}\")", name, p).Append('\n');
				}
			}
			if (containsUnusing){
				var array = names.ToArray();
				Array.Sort(array);
				builder.Append('\n');
				builder.Append("return function()").Append('\n');
				foreach(var name in names) {
					builder.Append("\t").AppendFormat("unusing(\"{0}\")", name).Append('\n');
				}
				builder.Append("end").Append('\n');
			}
			FileHelper.WriteString(include, builder.ToString());
			return true;
		}
		return false;
	}

	private static bool Excluded(string path, HashSet<KeyValuePair<int, string>> excludes)
	{
		foreach (var kv in excludes) {
			if (kv.Key == 1) {
				if (path == kv.Value)
					return true;
			} else if (kv.Key == 2) {
				if (path.StartsWith(kv.Value))
					return true;
			} else if (kv.Key == 3) {
				if (new Regex(kv.Value).IsMatch(path))
					return true;
			}
		}
		return false;
	}

	private static bool CheckAssetsChanged(string assetPath, HashSet<KeyValuePair<int, string>> excludes, string[] importedAssets, string[] deletedAssets, string[] movedAssets, string[] movedFromPath)
	{
		foreach (var p in importedAssets) {
			if (Excluded(p, excludes))
				continue;
			if (p.StartsWith(assetPath)) {
				return true;
			}
		}
		foreach (var p in deletedAssets) {
			if (Excluded(p, excludes))
				continue;
			if (p.StartsWith(assetPath)) {
				return true;
			}
		}
		foreach (var p in movedAssets) {
			if (Excluded(p, excludes))
				continue;
			if (p.StartsWith(assetPath)) {
				return true;
			}
		}
		foreach (var p in movedFromPath) {
			if (Excluded(p, excludes))
				continue;
			if (p.StartsWith(assetPath)) {
				return true;
			}
		}
		return false;
	}
}